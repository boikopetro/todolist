{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","utils/error-utils.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","initialState","status","error","setAppErrorAC","type","setAppStatusAC","handleServerAppError","data","dispatch","messages","length","handleServerNetworkError","message","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","resultCode","action","updateTaskAC","catch","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","key","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","todolist","items","setTasksAC","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","style","paddingTop","Button","TodolistsList","todolists","useSelector","state","removeTaskAC","removeTaskTC","addTaskAC","item","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7e8548f4.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'bcb0b5fe-869a-4b99-9053-6bb7e1416d15'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport type RequestStatusType =  'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({ type: 'APP/SET-ERROR', error } as const)\r\nexport const setAppStatusAC = (status:  RequestStatusType) => ({ type: 'APP/SET-STATUS', status } as const)\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC('loading'))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './App.css'\r\nimport {AppBar, Button, Container, IconButton, LinearProgress, Toolbar, Typography} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {RequestStatusType} from './app-reducer'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar />\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n             { status === 'loading' &&  <LinearProgress /> }\r\n            </AppBar>\r\n            <Container fixed>\r\n                <TodolistsList demo={demo}/>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}