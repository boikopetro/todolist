{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","newTaskTitle","setNewTaskTitle","error","setError","addTaskHandler","trim","addItem","TextField","value","onChange","e","currentTarget","onKeyPress","charCode","variant","size","label","helperText","onFocus","IconButton","onClick","color","PlaylistAdd","fontSize","EditableSpan","editMode","setEditMode","title","setTitle","onBlur","autoFocus","onDoubleClick","TodoList","newTitle","changeTodolistTitle","id","removeTodoList","addTask","tasks","map","task","key","className","isDone","Checkbox","changeTaskStatus","checked","newValue","changeTaskTitle","deleteTask","Grid","Button","filter","changeFilter","style","margin","App","todoListId","filteredTasks","tasksObj","t","setTasksObj","v1","newTasks","changeStatus","taskId","find","todoList","todoLists","el","setTodoLists","todoListId1","todoListId2","filteredTodoLists","todListId","tl","AppBar","position","Toolbar","edge","aria-label","Typography","Container","fixed","container","padding","newTodoList","spacing","item","Paper","elevation","width","borderRadius","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.041f72e7.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {Button, IconButton, TextField} from \"@material-ui/core\";\r\nimport {PlaylistAdd} from \"@material-ui/icons\";\r\n\r\nexport const AddItemForm = (props: AddItemFormPropsType) => {\r\n    const [newTaskTitle, setNewTaskTitle] = useState(\"\");\r\n    let [error, setError] = useState<null | string>(null);\r\n    const onNewTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setNewTaskTitle(e.currentTarget.value);\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error) {\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addTaskHandler()\r\n        }\r\n    };\r\n\r\n    const addTaskHandler = () => {\r\n        if (newTaskTitle.trim() !== \"\") {\r\n            props.addItem(newTaskTitle.trim())\r\n        } else {\r\n            setError(\"Required!!!\")\r\n        }\r\n        setNewTaskTitle(\"\");\r\n    };\r\n\r\n    return <div>\r\n        <TextField error={!!error}\r\n                   value={newTaskTitle}\r\n                   onChange={onNewTitleChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   variant=\"outlined\"\r\n                   size={\"small\"}\r\n                   label=\"add item\"\r\n                   helperText={error}\r\n                   onFocus={(e) => {\r\n                       setError(null)\r\n                   }}\r\n        />\r\n\r\n        <IconButton onClick={addTaskHandler} color={\"primary\"}>\r\n            <PlaylistAdd fontSize=\"large\"/>\r\n        </IconButton>\r\n    </div>\r\n}\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n\r\n}\r\nexport const EditableSpan = (props: EditableSpanPropsType) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [title, setTitle] = useState(\"\");\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.title)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title)\r\n    }\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={onChangeTitleHandler} onBlur={activateViewMode} autoFocus/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {FilterValuesType, TaskType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\n\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport {Button, Checkbox, Grid, IconButton} from \"@material-ui/core\";\r\n\r\ntype TodoListPropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    deleteTask: (id: string, todoListId: string) => void\r\n    changeFilter: (value: FilterValuesType, todoListId: string) => void\r\n    addTask: (title: string, todoListId: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todoListId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todoListId: string) => void\r\n    removeTodoList: (todListId: string) => void\r\n    changeTodolistTitle: (todListId: string, newTitle: string) => void\r\n\r\n}\r\n\r\nfunction TodoList(props: TodoListPropsType) {\r\n    const filterAllHandler = () => props.changeFilter(\"all\", props.id);\r\n    const filterCompletedHandler = () => props.changeFilter(\"completed\", props.id);\r\n    const filterActiveHandler = () => props.changeFilter(\"active\", props.id);\r\n    const removeTodoList = () => {\r\n        props.removeTodoList(props.id);\r\n    };\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n\r\n    const changeTodolistTitle = (newTitle: string) => {\r\n        props.changeTodolistTitle(props.id, newTitle)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan title={props.title} onChange={changeTodolistTitle}/>\r\n                <IconButton onClick={removeTodoList}>\r\n                    <DeleteIcon/>\r\n                </IconButton>\r\n\r\n\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <div>\r\n                {\r\n                    props.tasks.map(task => {\r\n                        const deleteTaskHandler = () => {\r\n                            props.deleteTask(task.id, props.id)\r\n                        }\r\n                        const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                            props.changeTaskStatus(task.id, e.currentTarget.checked, props.id)\r\n                        }\r\n                        const onChangeTitleHandler = (newValue: string) => {\r\n                            props.changeTaskTitle(task.id, newValue, props.id)\r\n                        }\r\n                        return (\r\n                            <div key={task.id} className={task.isDone ? \"done\" : \"\"}>\r\n                                <Checkbox\r\n                                    color={\"primary\"}\r\n                                    onChange={onChangeStatusHandler}\r\n                                    checked={task.isDone}/>\r\n                                <EditableSpan title={task.title} onChange={onChangeTitleHandler}/>\r\n                                <IconButton onClick={deleteTaskHandler}>\r\n                                    <DeleteIcon/>\r\n                                </IconButton>\r\n\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n            <Grid>\r\n\r\n                <Button variant={\"contained\"}\r\n                        size={props.filter === \"all\" ? \"small\" : \"medium\"}\r\n                        color={props.filter === \"all\" ? \"primary\" : \"default\"}\r\n                        onClick={filterAllHandler}\r\n                        style={{margin:\"3px\"}}\r\n                >All\r\n\r\n                </Button>\r\n\r\n                <Button variant={\"contained\"}\r\n                        size={props.filter === \"active\" ? \"small\" : \"medium\"}\r\n                        color={props.filter === \"active\" ? \"primary\" : \"default\"}\r\n                        onClick={filterActiveHandler}\r\n                        style={{margin:\"3px\"}}\r\n                >Active\r\n                </Button>\r\n\r\n\r\n                <Button variant={\"contained\"}\r\n                        size={props.filter === \"completed\" ? \"small\" : \"medium\"}\r\n                        color={props.filter === \"completed\" ? \"primary\" : \"default\"}\r\n                        onClick={filterCompletedHandler}\r\n                        style={{margin:\"3px\"}}\r\n                >Completed\r\n                </Button>\r\n\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default TodoList","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport TodoList from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Typography} from \"@material-ui/core\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type FilterValuesType = \"all\" | \"completed\" | \"active\"\r\nexport type TodoListsTypes = Array<TodoListType>\r\ntype TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n    function deleteTask(id: string, todoListId: string) {\r\n        const tasks = tasksObj[todoListId]\r\n        const filteredTasks = tasks.filter(t => t.id !== id)\r\n        tasksObj[todoListId] = filteredTasks\r\n        setTasksObj({...tasksObj});\r\n    }\r\n\r\n    function addTask(title: string, todoListId: string) {\r\n        const task = {id: v1(), title: title, isDone: false};\r\n        const tasks = tasksObj[todoListId];\r\n        const newTasks = [task, ...tasks];\r\n        tasksObj[todoListId] = newTasks;\r\n        setTasksObj({...tasksObj})\r\n    }\r\n\r\n    function changeStatus(taskId: string, isDone: boolean, todoListId: string) {\r\n        const tasks = tasksObj[todoListId]\r\n        const task = tasks.find(t => t.id === taskId)\r\n        if (task) {\r\n            task.isDone = isDone\r\n            setTasksObj({...tasksObj})\r\n        }\r\n    }\r\n\r\n    function changeTaskTitle(taskId: string, newTitle: string, todoListId: string) {\r\n        const tasks = tasksObj[todoListId]\r\n        const task = tasks.find(t => t.id === taskId)\r\n        if (task) {\r\n            task.title = newTitle;\r\n            setTasksObj({...tasksObj})\r\n        }\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todoListId: string) {\r\n        const todoList = todoLists.find(el => el.id === todoListId)\r\n        if (todoList) {\r\n            todoList.filter = value;\r\n            setTodoLists([...todoLists])\r\n\r\n        }\r\n    }\r\n\r\n    const todoListId1 = v1();\r\n    const todoListId2 = v1();\r\n\r\n    const [todoLists, setTodoLists] = useState<TodoListsTypes>([\r\n        {id: todoListId1, title: \"must learn\", filter: \"all\"},\r\n        {id: todoListId2, title: \"must buy\", filter: \"all\"}\r\n    ])\r\n    const removeTodoList = (todoListId: string) => {\r\n        const filteredTodoLists = todoLists.filter(el => el.id !== todoListId);\r\n        setTodoLists(filteredTodoLists);\r\n        delete tasksObj[todoListId];\r\n        setTasksObj(tasksObj);\r\n    }\r\n\r\n    const changeTodolistTitle = (todListId: string, newTitle: string) => {\r\n        const todoList = todoLists.find(tl => tl.id === todListId)\r\n        if (todoList) {\r\n            todoList.title = newTitle\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n\r\n    const [tasksObj, setTasksObj] = useState<TaskStateType>({\r\n        [todoListId1]: [\r\n            {id: v1(), title: \"HTML\", isDone: false},\r\n            {id: v1(), title: \"CSS\", isDone: false},\r\n            {id: v1(), title: \"react\", isDone: false},\r\n            {id: v1(), title: \"redux\", isDone: false}\r\n        ],\r\n        [todoListId2]: [\r\n            {id: v1(), title: \"car\", isDone: false},\r\n            {id: v1(), title: \"plane\", isDone: false}\r\n        ]\r\n    })\r\n\r\n    const addTodoList = (title: string) => {\r\n        let newTodoList: TodoListType = {\r\n            id: v1(),\r\n            title: title,\r\n            filter: \"all\"\r\n        };\r\n        setTodoLists([newTodoList, ...todoLists])\r\n        setTasksObj({...tasksObj, [newTodoList.id]: []})\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding:\"30px 0 10px 0\"}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={10}  >\r\n                    {todoLists.map((el) => {\r\n                        let filteredTasks = tasksObj[el.id];\r\n                        if (el.filter === \"completed\") {\r\n                            filteredTasks = filteredTasks.filter(t => t.isDone === true)\r\n                        }\r\n                        if (el.filter === \"active\") {\r\n                            filteredTasks = filteredTasks.filter(t => t.isDone === false)\r\n                        }\r\n                        return <Grid item>\r\n                            <Paper elevation={9} style={{width:\"300px\",padding:\"15px\", borderRadius:\"10px\"}} >\r\n                                <TodoList\r\n                                    key={el.id}\r\n                                    id={el.id}\r\n                                    title={el.title}\r\n                                    tasks={filteredTasks}\r\n                                    deleteTask={deleteTask}\r\n                                    changeFilter={changeFilter}\r\n                                    addTask={addTask}\r\n                                    changeTaskStatus={changeStatus}\r\n                                    changeTaskTitle={changeTaskTitle}\r\n                                    filter={el.filter}\r\n                                    removeTodoList={removeTodoList}\r\n                                    changeTodolistTitle={changeTodolistTitle}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}